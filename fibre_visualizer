import plotly.graph_objects as go
from plotly.colors import qualitative

class FibreVisualizer:

    def __init__(self, fibre_packer):
        """
        Initialize the visualizer with a FibrePacker instance.
        """
        self.fibre_packer = fibre_packer
        self.colors = fibre_packer.colors
        self.figsize = fibre_packer.figsize

    def color(self, i):
        """Color for the i-th fibre."""
        return self.colors[i % len(self.colors)]

    def show_radii_distribution(self, nbins=100):
        """Show the distribution of radii."""
        radii = self.fibre_packer.radii
        data = [go.Histogram(x=radii, nbinsx=nbins)]
        title = f"Radii distribution, N = {self.fibre_packer.N}, mean = {radii.mean():.2f}"
        fig = go.Figure(data=data)
        fig.update_layout(
            title=title,
            xaxis_title='Radii',
            yaxis_title="Count",
            width=self.figsize,
            height=self.figsize // 2
        )
        fig.show()

    def show_slice(self, id, title=None):
        """Show a 2D slice of the configuration."""
        p = self.fibre_packer.get_slice_points(id)
        shapes = self.fibre_packer.get_slice_circles(id)
        fig = go.Figure()
        fig.update_layout(shapes=shapes)
        fig.update_layout(self.fibre_packer.get_layout())
        if title:
            fig.update_layout(title=title)
        fig.show()

    def show_3D_configuration(self, title=None):
        """Show the 3D configuration of fibres."""
        x, y = self.fibre_packer.configuration.transpose(0, 1).detach()
        z = torch.arange(self.fibre_packer.Z)
        fig = go.Figure()
        for i, (xi, yi) in enumerate(zip(x.T, y.T)):
            fig.add_trace(go.Scatter3d(
                x=xi, y=yi, z=z, mode='lines',
                line_color=self.color(i), line=dict(width=4)
            ))
        fig.update_layout(
            scene=dict(
                xaxis_title='X',
                yaxis_title='Y',
                zaxis_title='Z',
                aspectmode='cube'
            ),
            showlegend=False,
            width=self.figsize,
            height=self.figsize
        )
        if title:
            fig.update_layout(title=title)
        fig.show()

    def show_losses(self, losses):
        """Show the loss contributions over iterations."""
        fig = go.Figure()
        for k, v in losses.items():
            fig.add_trace(go.Scatter(
                x=list(range(len(v))), y=v, mode='lines', name=k
            ))
        fig.update_layout(
            title='Loss contributions (log scale)',
            xaxis_title='Iteration',
            yaxis_title='Loss',
            yaxis_type='log',
            width=self.figsize,
            height=self.figsize // 2
        )
        fig.show()

    def animate_slices(self, title=None):
        """Animate the slices of the configuration."""
        frames = []
        for z in range(self.fibre_packer.Z):
            shapes = self.fibre_packer.get_slice_circles(z)
            frames.append(go.Frame(layout=dict(shapes=shapes), name=str(z)))
        layout = animation_controls(self.fibre_packer.Z)
        layout.update(self.fibre_packer.get_layout())
        fig = go.Figure(layout=layout, frames=frames)
        fig.update_layout(shapes=frames[0].layout.shapes)
        if title:
            fig.update_layout(title=title)
        fig.show()